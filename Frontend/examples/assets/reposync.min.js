class RepoSync {
  constructor(options = {}) {
    this.config = {
      container: options.container || "#reposync",
      apiUrl: options.apiUrl || "http://localhost:3001",
      theme: options.theme || "light",
      itemsPerPage: options.itemsPerPage || 10,
      features: options.features || ["search"],
    };

    this.state = {
      authors: [],
      publications: [],
      filteredPublications: [],
      currentPage: 1,
      loading: false,
      error: null,
      yearFilter: "all",
    };

    this.init();
  }

  async init() {
    this.container = document.querySelector(this.config.container);
    if (!this.container) {
      console.error(`Container ${this.config.container} not found`);
      return;
    }

    // Initial render
    this.render();

    // Attach event listeners
    this.attachEventListeners();
  }

  render() {
    // Basic search form with optional filter section
    this.container.innerHTML = `
            <div class="reposync-wrapper ${this.config.theme}">
                <div class="search-section">
                    <input 
                        type="text" 
                        class="search-input" 
                        placeholder="Search for author..."
                        autocomplete="off"
                    >
                    <button class="search-button">
                        Search
                    </button>
                </div>
                
                ${
                  this.config.features.includes("filter")
                    ? `
                    <div class="filter-section" style="display: none;">
                        <select class="year-filter">
                            <option value="all">All Years</option>
                        </select>
                    </div>
                `
                    : ""
                }
                
                <div class="results-section">
                    <div class="message-box"></div>
                    <div class="authors-list"></div>
                    <div class="publications-list"></div>
                    <div class="pagination-controls"></div>
                </div>
            </div>
        `;
  }

  attachEventListeners() {
    // Search button click
    const searchButton = this.container.querySelector(".search-button");
    if (searchButton) {
      searchButton.addEventListener("click", () => {
        const input = this.container.querySelector(".search-input");
        if (input) this.searchAuthors(input.value);
      });
    }

    // Search input enter key
    const searchInput = this.container.querySelector(".search-input");
    if (searchInput) {
      searchInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter") {
          this.searchAuthors(searchInput.value);
        }
      });
    }

    // Year filter change
    const yearFilter = this.container.querySelector(".year-filter");
    if (yearFilter) {
      yearFilter.addEventListener("change", (e) => {
        this.filterPublicationsByYear(e.target.value);
      });
    }
  }

  showMessage(message, type = "info") {
    const messageBox = this.container.querySelector(".message-box");
    if (messageBox) {
      messageBox.innerHTML = `<div class="message ${type}">${message}</div>`;
    }
  }

  async searchAuthors(query) {
    if (!query?.trim()) {
      this.showMessage("Please enter an author name", "error");
      return;
    }

    this.setState({ loading: true, error: null });
    this.showMessage("Searching...", "info");

    try {
      const response = await fetch(
        `${this.config.apiUrl}/api/search?author_name=${encodeURIComponent(
          query
        )}`
      );
      const data = await response.json();

      if (!response.ok)
        throw new Error(data.error || "Failed to fetch authors");

      if (!data.profiles?.length) {
        this.showMessage("No authors found", "info");
        this.setState({ authors: [], loading: false });
        return;
      }

      this.setState({
        authors: data.profiles,
        loading: false,
      });
      this.updateAuthorsList();
    } catch (error) {
      console.error("Search error:", error);
      this.showMessage(error.message, "error");
      this.setState({ error: error.message, loading: false });
    }
  }

  async fetchPublications(authorId) {
    if (!authorId) return;

    this.setState({ loading: true, error: null });
    this.showMessage("Fetching publications...", "info");

    try {
      const response = await fetch(
        `${this.config.apiUrl}/publications?author_id=${authorId}`
      );
      const data = await response.json();

      if (!response.ok)
        throw new Error(data.error || "Failed to fetch publications");

      const publications = data.articles || [];

      // Show filter section if it exists
      const filterSection = this.container.querySelector(".filter-section");
      if (filterSection) {
        filterSection.style.display = "block";

        // Update year options
        const years = [
          ...new Set(
            publications
              .map((pub) => pub.year)
              .filter(Boolean)
              .sort((a, b) => b - a)
          ),
        ];

        const yearFilter = filterSection.querySelector(".year-filter");
        if (yearFilter) {
          yearFilter.innerHTML = `
                        <option value="all">All Years</option>
                        ${years
                          .map(
                            (year) => `
                            <option value="${year}">${year}</option>
                        `
                          )
                          .join("")}
                    `;
        }
      }

      this.setState({
        publications,
        filteredPublications: publications,
        currentPage: 1,
        loading: false,
        yearFilter: "all",
      });

      this.updatePublicationsList();
      this.updatePagination();
    } catch (error) {
      console.error("Publications fetch error:", error);
      this.showMessage(error.message, "error");
      this.setState({ error: error.message, loading: false });
    }
  }

  filterPublicationsByYear(year) {
    const publications = this.state.publications;
    let filtered;

    if (year === "all") {
      filtered = publications;
    } else {
      const yearNum = parseInt(year);
      filtered = publications.filter((pub) => {
        const pubYear = parseInt(pub.year);
        return pubYear === yearNum;
      });
    }

    this.setState({
      filteredPublications: filtered,
      currentPage: 1,
      yearFilter: year,
    });

    this.updatePublicationsList();
    this.updatePagination();
  }

  updateAuthorsList() {
    const authorsList = this.container.querySelector(".authors-list");
    if (!authorsList) return;

    if (this.state.loading) {
      authorsList.innerHTML = '<div class="loading">Loading...</div>';
      return;
    }

    if (!this.state.authors?.length) {
      authorsList.innerHTML = "";
      return;
    }

    authorsList.innerHTML = this.state.authors
      .map(
        (author) => `
            <div class="author-item" data-author-id="${author.author_id}">
                <h3>${author.name || "Unknown Author"}</h3>
                <p>${author.affiliations || "No affiliation"}</p>
                <button class="view-publications">View Publications</button>
            </div>
        `
      )
      .join("");

    // Add click handlers
    authorsList.querySelectorAll(".view-publications").forEach((button) => {
      button.addEventListener("click", (e) => {
        const authorItem = e.target.closest(".author-item");
        if (authorItem) {
          const authorId = authorItem.dataset.authorId;
          this.fetchPublications(authorId);
        }
      });
    });
  }

  updatePublicationsList() {
    const publicationsList = this.container.querySelector(".publications-list");
    if (!publicationsList) return;

    if (this.state.loading) {
      publicationsList.innerHTML =
        '<div class="loading">Loading publications...</div>';
      return;
    }

    if (!this.state.filteredPublications?.length) {
      publicationsList.innerHTML =
        '<div class="no-results">No publications found</div>';
      return;
    }

    // Get paginated subset
    const startIndex = (this.state.currentPage - 1) * this.config.itemsPerPage;
    const endIndex = startIndex + this.config.itemsPerPage;
    const paginatedPublications = this.state.filteredPublications.slice(
      startIndex,
      endIndex
    );

    publicationsList.innerHTML = paginatedPublications
      .map(
        (pub) => `
            <div class="publication-item">
                <h3>
                    <a href="${
                      pub.link || "#"
                    }" target="_blank" rel="noopener noreferrer">
                        ${pub.title || "Untitled"}
                    </a>
                </h3>
                <p class="authors">${pub.authors || "Unknown authors"}</p>
                <p class="venue">${pub.publication || "Unknown venue"}</p>
                <p class="year">${pub.year || "Year unknown"}</p>
                ${
                  pub.cited_by
                    ? `<p class="citations">Citations: ${pub.cited_by}</p>`
                    : ""
                }
            </div>
        `
      )
      .join("");
  }

  updatePagination() {
    const paginationContainer = this.container.querySelector(
      ".pagination-controls"
    );
    if (!paginationContainer) return;

    const totalPages = Math.ceil(
      this.state.filteredPublications.length / this.config.itemsPerPage
    );

    if (totalPages <= 1) {
      paginationContainer.innerHTML = "";
      return;
    }

    let paginationHTML = `
            <div class="pagination">
                <button class="pagination-button" 
                    ${this.state.currentPage === 1 ? "disabled" : ""} 
                    data-page="prev">Previous</button>
        `;

    for (let i = 1; i <= totalPages; i++) {
      paginationHTML += `
                <button class="pagination-button ${
                  i === this.state.currentPage ? "active" : ""
                }" 
                    data-page="${i}">${i}</button>
            `;
    }

    paginationHTML += `
                <button class="pagination-button" 
                    ${this.state.currentPage === totalPages ? "disabled" : ""} 
                    data-page="next">Next</button>
            </div>
        `;

    paginationContainer.innerHTML = paginationHTML;

    // Add pagination click handlers
    paginationContainer
      .querySelectorAll(".pagination-button")
      .forEach((button) => {
        button.addEventListener("click", (e) => {
          const page = e.target.dataset.page;
          if (page === "prev" && this.state.currentPage > 1) {
            this.setState({ currentPage: this.state.currentPage - 1 });
          } else if (page === "next" && this.state.currentPage < totalPages) {
            this.setState({ currentPage: this.state.currentPage + 1 });
          } else if (page !== "prev" && page !== "next") {
            this.setState({ currentPage: parseInt(page) });
          }
          this.updatePublicationsList();
          this.updatePagination();
        });
      });
  }

  setState(newState) {
    this.state = { ...this.state, ...newState };
  }
}

// Make available globally
if (typeof window !== "undefined") {
  window.RepoSync = RepoSync;
}
